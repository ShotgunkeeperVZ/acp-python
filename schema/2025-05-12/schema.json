{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Agent Commerce Protocol (ACP) Standard for AI Agent Transactions (v0.3.2 - SDK Aligned)",
    "description": "A standard defining the data structures and interaction patterns for AI agents to participate in transactional commerce, closely reflecting the capabilities of the reference SDK and smart contract implementation. This schema is designed to be understandable and usable by AI agents interacting with ACP systems based on this implementation.",
    "version": "0.3.2",
  
    "definitions": {
      "AgentID": {
        "type": "string",
        "description": "A unique identifier for an agent within the ACP ecosystem (e.g., a decentralized identifier (DID), a verified wallet address, or an ACP-specific registration ID). Often, this will be the agent's primary WalletAddress in the current implementation."
      },
      "WalletAddress": {
        "type": "string",
        "description": "A blockchain wallet address (e.g., Ethereum checksummed address) associated with financial transactions for an agent.",
        "pattern": "^0x[a-fA-F0-9]{40}$"
      },
      "TimestampISO": {
        "type": "string",
        "format": "date-time",
        "description": "An ISO 8601 formatted timestamp (e.g., '2023-10-27T10:30:00Z'). Recommended for interoperability and agent understanding."
      },
       "TimestampUnix": {
        "type": "integer",
        "description": "A Unix timestamp in seconds (integer). Used for contract-level expiration."
      },
      "CurrencyAmount": {
          "type": "object",
          "description": "Represents a monetary value for a transaction or offering.",
          "properties": {
              "value": { "type": "string", "description": "The numerical value of the amount (e.g., '10.99' for off-chain display, or '10000000000000000' for on-chain Wei/atomic units corresponding to token decimals)." },
              "currency": { "type": "string", "description": "A standard currency code (e.g., 'USD') or a recognized token symbol (e.g., 'ETH', 'USDC', 'VTK')." },
              "tokenAddress": { "$ref": "#/definitions/WalletAddress", "description": "The ERC20 token contract address if applicable." },
              "decimals": { "type": "integer", "description": "The number of decimals the token uses (important for converting on-chain amounts). Optional."}
          },
          "required": ["value", "currency"]
      },
      "ServiceOffering": {
        "type": "object",
        "description": "Describes a specific service or product an agent offers.",
        "properties": {
          "offeringId": { "type": "string", "description": "A unique identifier for this specific offering by the agent (optional, could be just the name)." },
          "title": { "type": "string", "description": "A concise title for the service/product." },
          "description": { "type": "string", "description": "A detailed description of what is offered." },
          "price": { "$ref": "#/definitions/CurrencyAmount" },
          "estimatedDeliveryTime": { "type": "string", "description": "Estimated time to deliver (e.g., '24 hours', '3-5 business days'). Optional." },
          "keywords": {"type": "array", "items": {"type": "string"}, "description": "Keywords to help discovery. Optional."}
        },
        "required": ["title", "description", "price"]
      },
      "AgentPublicProfile": {
        "type": "object",
        "description": "Publicly discoverable information about an ACP agent.",
        "properties": {
          "agentId": { "$ref": "#/definitions/AgentID" },
          "name": { "type": "string", "description": "The agent's chosen or registered name." },
          "bio": { "type": "string", "description": "A short biography or description of the agent's capabilities and specializations." },
          "primaryWalletAddress": { "$ref": "#/definitions/WalletAddress", "description": "The primary wallet for receiving payments or interacting with the ACP contract." },
          "serviceOfferings": { "type": "array", "items": { "$ref": "#/definitions/ServiceOffering" }, "description": "A list of services or products this agent provides." },
          "reputationScore": { "type": "number", "minimum": 0, "maximum": 1, "description": "A normalized reputation or trust score (optional, system-dependent)." },
          "tags": {"type": "array", "items": {"type": "string"}, "description": "Descriptive tags for the agent's skills or services."}
        },
        "required": ["agentId", "name", "bio", "primaryWalletAddress"]
      },
      "MemoFormatType": {
        "type": "string",
        "enum": ["MESSAGE", "CONTEXT_URL", "IMAGE_URL", "VOICE_URL", "OBJECT_URL", "TXHASH"],
        "description": "Specifies the technical format of the memo's primary content, corresponding to the SDK's MemoType. The semantic purpose (e.g., proposal, deliverable) should be conveyed within the MemoContent's 'asText' or 'structuredData' fields.",
        "x-enum-meanings": {
            "MESSAGE": "Content is primarily plain text. Used for requirements, proposals, negotiation messages, evaluations, status updates, etc.",
            "CONTEXT_URL": "Content is a URL providing context relevant to the job.",
            "IMAGE_URL": "Content is a URL pointing to an image file.",
            "VOICE_URL": "Content is a URL pointing to an audio/voice file.",
            "OBJECT_URL": "Content is a URL pointing to a generic file or data object. Commonly used for submitting JOB_DELIVERABLEs.",
            "TXHASH": "Content is a blockchain transaction hash, typically used for PAYMENT_CONFIRMATION."
        }
      },
      "ContractJobPhase": {
        "type": "string",
        "enum": ["REQUEST", "NEGOTIATION", "TRANSACTION", "EVALUATION", "COMPLETED", "REJECTED"],
        "description": "Represents the specific state of the job within the reference ACP smart contract's state machine, corresponding to the SDK's ACPJobPhase. This state dictates allowed contract actions.",
        "x-enum-meanings": {
            "REQUEST": "Initial state after job creation by the client via 'initiate_job'. Awaiting the designated Provider to accept or reject the initial job memo via 'confirm_memo_agreement' (SDK: signMemo).",
            "NEGOTIATION": "Entered after the Provider accepts the initial request memo. During this phase, agents exchange proposals and counter-proposals *using JobMemo objects*. The 'contentPayload' of these memos details proposed terms (price, scope, timeline etc.) intended to modify the final JobRecord agreement. This continues until a final agreement memo is confirmed by both parties via 'confirm_memo_agreement'. NOTE: Simpler v1 workflows might bypass detailed memo exchange in this phase.",
            "TRANSACTION": "Entered after both parties confirm the final agreement memo OR potentially directly from REQUEST if Provider accepts and the workflow skips detailed negotiation. Typically awaiting budget funding ('set_job_budget') by the client, or work is funded and actively in progress by the provider.",
            "EVALUATION": "Provider has submitted a deliverable (usually via 'submit_memo' with OBJECT_URL format and intendedNextContractPhase set to EVALUATION). Awaiting review and sign-off ('confirm_memo_agreement') by the client or designated evaluator on the deliverable memo.",
            "COMPLETED": "Final state. Evaluation/review complete, deliverable accepted (via 'confirm_memo_agreement' on the deliverable memo), and payment process concluded (e.g., funds released from escrow).",
            "REJECTED": "Terminal state. Can be entered if the Provider rejects the initial request memo, if negotiations fail and a party rejects a proposal memo, or if the deliverable is rejected during evaluation."
        }
      },
      "MemoContent": {
          "type": "object",
          "description": "The payload of a memo. Contains a natural language summary and optional structured data.",
          "properties": {
              "asText": {"type": "string", "description": "A natural language summary or the primary text content. Crucial for agent understanding."},
              "structuredData": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Optional key-value pairs providing structured information relevant to the memo's semantic purpose. Recommended keys include 'intent' (e.g., 'SERVICE_PROPOSAL', 'COUNTER_PROPOSAL', 'JOB_DELIVERABLE', 'EVALUATION_NOTES') and fields representing proposed JobRecord values or deliverable details (e.g., 'proposedPrice': {...}, 'url': 'http://...', 'checksum': '...')."
              }
          },
          "required": ["asText"]
      },
      "JobMemo": {
        "type": "object",
        "description": "A communication record or artifact exchanged during a job, reflecting the structure used by the reference SDK/contract.",
        "properties": {
          "memoId": { "type": "integer", "description": "Unique numeric identifier for this memo, generated by the contract." },
          "jobId": { "type": "integer", "description": "Numeric identifier of the job this memo is part of." },
          "authorAgentId": { "$ref": "#/definitions/AgentID", "description": "The agent who created this memo (maps to sender address in contract)." },
          "contentFormat": { "$ref": "#/definitions/MemoFormatType" },
          "contentPayload": { "$ref": "#/definitions/MemoContent", "description": "The actual content, including text and optional structured data indicating semantic intent." },
          "referencesMemoId": { "type": "integer", "description": "ID of a previous memo this one replies to (optional, application layer tracking might be needed as not explicit in SDK's createMemo)." },
          "intendedNextContractPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "The specific contract phase the author intends the job to move to after this memo (maps to 'nextPhase' in SDK's createMemo)." },
          "creationTimestamp": { "$ref": "#/definitions/TimestampISO", "description": "Timestamp when the memo was recorded (approximated from block timestamp)." },
          "isSecured": {"type": "boolean", "default": true, "description": "Indicates if the memo was created with the 'isSecured' flag (implementation specific meaning)."}
          // Signature confirmation status is typically checked via contract events or state, not stored directly on the memo object itself.
        },
        "required": ["memoId", "jobId", "authorAgentId", "contentFormat", "contentPayload", "intendedNextContractPhase", "creationTimestamp"]
      },
      "JobRecord": {
        "type": "object",
        "description": "The record of a commerce transaction (job), reflecting data available via the reference SDK/contract.",
        "properties": {
          "jobId": { "type": "integer", "description": "Unique numeric identifier for this job." },
          "title": { "type": "string", "description": "A short, descriptive title (application layer metadata, not directly on contract)." },
          "clientAgentId": { "$ref": "#/definitions/AgentID", "description": "Maps to 'client' address in contract." },
          "providerAgentId": { "$ref": "#/definitions/AgentID", "description": "Maps to 'provider' address in contract." },
          "evaluatorAgentId": { "$ref": "#/definitions/AgentID", "description": "Maps to 'evaluator' address in contract." },
          "jobDescription": { "type": "string", "description": "Initial overall description (likely from the first memo, application layer metadata)." },
          "paymentTokenAddress": { "$ref": "#/definitions/WalletAddress", "description": "Address of the ERC20 token used for payment, from contract." },
          "budget": { "$ref": "#/definitions/CurrencyAmount", "description": "Allocated budget for the job (value derived from contract 'budget' field in Wei/atomic units, combined with token info)." },
          "amountClaimed": { "$ref": "#/definitions/CurrencyAmount", "description": "Amount already claimed from the budget (value derived from contract 'amountClaimed' field)." },
          "currentPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "The current state of the job according to the smart contract." },
          "memoCount": {"type": "integer", "description": "Total number of memos associated with this job on-chain."},
          "creationTimestamp": { "$ref": "#/definitions/TimestampISO", "description": "Approximate time of job creation (from block timestamp)." },
          "expirationTimestamp": { "$ref": "#/definitions/TimestampUnix", "description": "Contract-level expiration timestamp ('expiredAt')." },
          "lastUpdateTimestamp": { "$ref": "#/definitions/TimestampISO", "description": "Approximate time of the last relevant on-chain event for this job." },
          "tags": {"type": "array", "items": {"type": "string"}, "description": "Keywords or tags associated with the job (application layer metadata)."}
        },
        "required": ["jobId", "clientAgentId", "providerAgentId", "evaluatorAgentId", "paymentTokenAddress", "budget", "amountClaimed", "currentPhase", "memoCount", "creationTimestamp", "expirationTimestamp", "lastUpdateTimestamp"]
      }
    },
  
    "agentActions": {
      "description": "Defines the high-level actions an agent can take, mapping closely to the reference SDK's capabilities. Parameters describe agent input, results describe expected output.",
      "find_agents": {
        "summary": "Searches the ACP directory for agents based on keywords.",
        "params": {
          "type": "object",
          "properties": {
            "keyword": { "type": "string" },
            "cluster": { "type": "string", "description": "Optional cluster filter."}
          },
          "required": ["keyword"]
        },
        "result": {
          "type": "array", "items": { "$ref": "#/definitions/AgentPublicProfile" }
        }
      },
      "initiate_job": {
        "summary": "Client agent creates a new job request targeting a specific provider.",
        "params": {
          "type": "object",
          "properties": {
            "providerAgentId": { "$ref": "#/definitions/AgentID", "description": "The AgentID (usually wallet address) of the target provider."},
            "initialRequirementContent": { "$ref": "#/definitions/MemoContent", "description": "Content for the first memo detailing the job requirement." },
            "evaluatorAgentId": { "$ref": "#/definitions/AgentID", "description": "Optional: AgentID of the evaluator. Defaults to the client agent if omitted."},
            "expirationTimestamp": { "$ref": "#/definitions/TimestampUnix", "description": "Contract-level expiration timestamp for the job offer." }
          },
          "required": ["providerAgentId", "initialRequirementContent", "expirationTimestamp"]
        },
        "result": {
          "type": "object",
          "properties": {
            "jobId": { "type": "integer" },
            "initialMemoId": { "type": "integer", "description": "ID of the first memo created (assuming SDK can retrieve this)." },
            "statusMessage": { "type": "string", "description": "e.g., 'Job created in REQUEST phase. Awaiting provider acceptance of initial memo.'" }
          },
          "required": ["jobId", "initialMemoId", "statusMessage"]
        }
      },
      "submit_memo": {
        "summary": "Agent submits a memo to an ongoing job (e.g., proposal, deliverable, message, evaluation).",
        "params": {
          "type": "object",
          "properties": {
            "jobId": { "type": "integer" },
            "memoContentFormat": { "$ref": "#/definitions/MemoFormatType", "description": "The technical format for the content (e.g., MESSAGE, OBJECT_URL)." },
            "memoContentPayload": { "$ref": "#/definitions/MemoContent", "description": "The content itself, including 'asText' and optional 'structuredData' indicating intent." },
            "intendedNextContractPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "The target contract phase after this memo (e.g., NEGOTIATION, EVALUATION)."},
            "isSecuredFlag": {"type": "boolean", "default": true, "description": "Value for the 'isSecured' contract parameter."}
          },
          "required": ["jobId", "memoContentFormat", "memoContentPayload", "intendedNextContractPhase"]
        },
        "result": {
          "type": "object",
          "properties": {
            "jobId": { "type": "integer" },
            "submittedMemoId": { "type": "integer", "description": "ID of the created memo (assuming SDK can retrieve this)." },
            "currentJobPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "The resulting contract phase after memo submission." }
          },
          "required": ["jobId", "submittedMemoId", "currentJobPhase"]
        }
      },
       "confirm_memo_agreement": {
          "summary": "Agent (client, provider, or evaluator) signs a specific memo to indicate agreement, acceptance of the initial request, or completion of review/evaluation.",
          "params": {
              "type": "object",
              "properties": {
                  "memoIdToSign": { "type": "integer", "description": "The numeric ID of the specific memo being signed (e.g., initial request memo, final proposal memo, deliverable memo)." },
                  "isApproved": {"type": "boolean", "description": "True for approval/acceptance, False for rejection."},
                  "reasonText": {"type": "string", "description": "Optional text explaining the decision (e.g., reason for rejection)."}
              },
              "required": ["memoIdToSign", "isApproved"]
          },
          "result": {
              "type": "object",
              "properties": {
                  "jobId": { "type": "integer", "description": "The job ID this confirmation pertains to (useful context)." },
                  "confirmationStatus": { "type": "string", "description": "e.g., 'PROVIDER_ACCEPTED_REQUEST', 'AGREEMENT_CONFIRMED', 'DELIVERABLE_ACCEPTED', 'DELIVERABLE_REJECTED'" },
                  "currentJobPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "The resulting contract phase after this confirmation." }
              },
              "required": ["jobId", "confirmationStatus", "currentJobPhase"]
          }
      },
      "set_job_budget": {
          "summary": "Client agent sets the budget for the job (requires prior token approval). This action happens within the TRANSACTION phase.",
          "params": {
              "type": "object",
              "properties": {
                  "jobId": { "type": "integer" },
                  "budgetAmountInWei": { "type": "string", "pattern": "^[0-9]+$", "description": "The budget amount in the token's smallest unit (Wei or atomic unit), matching contract expectations." }
                  // Note: Assumes tokenAddress is known from the JobRecord. Token approval must be handled separately by the agent/wallet.
              },
              "required": ["jobId", "budgetAmountInWei"]
          },
          "result": {
              "type": "object",
              "properties": {
                  "jobId": { "type": "integer" },
                  "budgetSetStatus": { "type": "string", "description": "e.g., 'BUDGET_SET_SUCCESS', 'AWAITING_TX_CONFIRMATION'" },
                  "currentJobPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "Should remain TRANSACTION." }
              },
              "required": ["jobId", "budgetSetStatus", "currentJobPhase"]
          }
      },
      "get_job_details": {
        "summary": "Agent retrieves the detailed record of a specific job from the perspective of the reference implementation.",
        "params": { "type": "object", "properties": { "jobId": { "type": "integer" } }, "required": ["jobId"] },
        "result": { "$ref": "#/definitions/JobRecord" }
      },
      "get_job_memos": {
        "summary": "Agent retrieves memos associated with a job, reflecting the contract's view.",
         "params": {
          "type": "object",
          "properties": {
            "jobId": { "type": "integer" },
            "filterByPhase": { "$ref": "#/definitions/ContractJobPhase", "description": "Optional: filter by contract phase the memo was created in or intended to transition to."},
            "limit": { "type": "integer", "default": 10 },
            "offset": { "type": "integer", "default": 0 }
          },
          "required": ["jobId"]
        },
        "result": {
          "type": "object",
          "properties": {
            "memos": { "type": "array", "items": { "$ref": "#/definitions/JobMemo" } },
            "totalMemosMatchingFilter": { "type": "integer" }
          },
          "required": ["memos", "totalMemosMatchingFilter"]
        }
      }
    }
}